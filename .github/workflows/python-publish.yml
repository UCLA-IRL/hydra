# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Update Version and Publish Package

on:
  push:
    branches:
      - main

jobs:
  update-version:
    name: Update Version
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Fetch all commit messages
      run: |
        git fetch --prune --unshallow
        git fetch --all

    - name: Determine version bump
      id: version
      run: |
        minor_message="minor version to"
        major_message="major version to"
        patch_message="patch version to"
        
        # Get the commit messages for the last 10 commits
        commit_messages=$(git log -n 10 --pretty=format:%B)
        
        echo "Commit messages: $commit_messages"
        
        # Extract versions from commit messages
        minor_versions=$(echo "$commit_messages" | grep -oP "$minor_message \K[0-9]+\.[0-9]+" | sort -V | tail -n 1)
        major_versions=$(echo "$commit_messages" | grep -oP "$major_message \K[0-9]+" | sort -V | tail -n 1)
        patch_versions=$(echo "$commit_messages" | grep -oP "$patch_message \K[0-9]+\.[0-9]+\.[0-9]+" | sort -V | tail -n 1)

        new_version=""
        
        # Determine the highest version bump
        if [[ $patch_versions ]]; then
          new_version="$patch_versions"
        fi

        if [[ $minor_versions ]]; then
          minor_version="$minor_versions.0"
          if [[ ! $new_version || $(echo -e "$minor_version\n$new_version" | sort -V | tail -n 1) == $minor_version ]]; then
            new_version="$minor_version"
          fi
        fi

        if [[ $major_versions ]]; then
          major_version="$major_versions.0.0"
          if [[ ! $new_version || $(echo -e "$major_version\n$new_version" | sort -V | tail -n 1) == $major_version ]]; then
            new_version="$major_version"
          fi
        fi
        
        if [[ $new_version ]]; then
          echo "Version bump detected: $new_version"
          echo "::set-output name=version::$new_version"
        else
          echo "No version bump found in the commit messages."
          exit 1
        fi

    - name: Bump version
      run: |
        version=${{ steps.version.outputs.version }}
        if [ -z "$version" ]; then
          echo "No version to bump."
          exit 1
        fi
        
        # Update version in docs/version.py
        echo "Updating docs/version.py to version $version"
        sed -i "s/__version__ = \".*\"/__version__ = \"$version\"/" docs/version.py
        
        if git diff --quiet; then
          echo "No changes to commit."
          exit 0
        fi

    - name: Commit and push version bump
      if: success()
      env:
        GH_PAT: ${{ secrets.BUMP_VERSION_GABRIEL }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add docs/version.py
        git commit -m "Bump version to $version"
        git push https://x-access-token:${{ secrets.BUMP_VERSION_GABRIEL }}@github.com/${{ github.repository }}.git HEAD:main

  build:
    name: Build distribution üì¶
    needs: update-version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: python3 -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ndn-hydra-repo  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign the Python üêç distribution üì¶ with Sigstore and upload them to GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: ./dist/*.tar.gz ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: gh release create '${{ github.ref_name }}' --repo '${{ github.repository }}' --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: gh release upload '${{ github.ref_name }}' dist/** --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/<package-name>
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
